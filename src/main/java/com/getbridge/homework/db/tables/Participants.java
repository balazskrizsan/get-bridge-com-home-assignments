/*
 * This file is generated by jOOQ.
 */
package com.getbridge.homework.db.tables;


import com.getbridge.homework.db.Keys;
import com.getbridge.homework.db.Public;
import com.getbridge.homework.db.tables.records.ParticipantsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Participants extends TableImpl<ParticipantsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.participants</code>
     */
    public static final Participants PARTICIPANTS = new Participants();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParticipantsRecord> getRecordType() {
        return ParticipantsRecord.class;
    }

    /**
     * The column <code>public.participants.one_on_ones_id</code>.
     */
    public final TableField<ParticipantsRecord, Long> ONE_ON_ONES_ID = createField(DSL.name("one_on_ones_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.participants.employee_id</code>.
     */
    public final TableField<ParticipantsRecord, Long> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Participants(Name alias, Table<ParticipantsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Participants(Name alias, Table<ParticipantsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.participants</code> table reference
     */
    public Participants(String alias) {
        this(DSL.name(alias), PARTICIPANTS);
    }

    /**
     * Create an aliased <code>public.participants</code> table reference
     */
    public Participants(Name alias) {
        this(alias, PARTICIPANTS);
    }

    /**
     * Create a <code>public.participants</code> table reference
     */
    public Participants() {
        this(DSL.name("participants"), null);
    }

    public <O extends Record> Participants(Table<O> child, ForeignKey<O, ParticipantsRecord> key) {
        super(child, key, PARTICIPANTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ParticipantsRecord> getPrimaryKey() {
        return Keys.PK___ONE_ON_ONES_ID___EMPLOYEE_ID;
    }

    @Override
    public List<ForeignKey<ParticipantsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PARTICIPANTS__FK___ONE_ON_ONES_ID___ONE_ON_ONES__ID);
    }

    private transient OneOnOnes _oneOnOnes;

    /**
     * Get the implicit join path to the <code>public.one_on_ones</code> table.
     */
    public OneOnOnes oneOnOnes() {
        if (_oneOnOnes == null)
            _oneOnOnes = new OneOnOnes(this, Keys.PARTICIPANTS__FK___ONE_ON_ONES_ID___ONE_ON_ONES__ID);

        return _oneOnOnes;
    }

    @Override
    public Participants as(String alias) {
        return new Participants(DSL.name(alias), this);
    }

    @Override
    public Participants as(Name alias) {
        return new Participants(alias, this);
    }

    @Override
    public Participants as(Table<?> alias) {
        return new Participants(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Participants rename(String name) {
        return new Participants(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Participants rename(Name name) {
        return new Participants(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Participants rename(Table<?> name) {
        return new Participants(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
